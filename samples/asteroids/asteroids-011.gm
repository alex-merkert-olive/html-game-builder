{"setup-code":"game.ship = {\n  x: 400,\n  y: 450,\n  w: 30,\n  h: 30,\n  angle: 0,\n  thrust: 0,\n  dead: false,\n};\ngame.score = 0;\ngame.asteroids = [];\ngame.bullets = [];\n\ngame.asteroidImage = new Image();\ngame.asteroidImage.src = 'https://nineplanets.org/wp-content/uploads/2019/09/asteroid.png';\n\ngame.shipImage = new Image();\ngame.shipImage.src = 'https://cdn1.iconfinder.com/data/icons/space-and-ships-1/512/Prancheta_1-512.png';\n\ngame.distance = (a, b) => {\n  const dx = a.x - b.x;\n  const dy = a.y - b.y;\n  const dist = Math.sqrt((dx ** 2) + (dy ** 2));\n  return dist;\n};","click-code":"// complicated logic - if we click, we fire a bullet in the direction of the click from the ship\n\nconst { x, y } = event;\nconst { ship } = game;\n\nconst dy = y - ship.y;\nconst dx = x - ship.x;\n\nconst angle = Math.atan2(dy, dx);\n\nconst vx = 20 * Math.cos(ship.angle);\nconst vy = 20 * Math.sin(ship.angle);\nconst bullet = { x: ship.x, y: ship.y, vx, vy };\n\ngame.bullets.push(bullet);","update-code":"if (game.ship.dead) {\n  if (keys.d === frame) {\n    game.ship = {\n      x: 400,\n      y: 450,\n      w: 30,\n      h: 30,\n      angle: 0,\n      thrust: 0,\n      dead: false,\n    };\n    game.score = 0;\n    game.asteroids = [];\n    game.bullets = [];\n  }\n  return;\n}\nconsole.log(keys);\n\nlet dA = 0;\nif (keys.a > 0) {\n  dA = -0.15;\n} else if (keys.d > 0) {\n  dA = 0.15;\n}\ngame.ship.angle += dA;\n\nlet thrust = 0;\nif (keys.w > 0) {\n  thrust = 5;\n} else if (keys.s > 0) {\n  thrust = -5;\n}\ngame.ship.thrust = thrust;\n\ngame.ship.x += game.ship.thrust * Math.cos(game.ship.angle);\ngame.ship.y += game.ship.thrust * Math.sin(game.ship.angle);\n\n\n// we want to create a random asteroid every 40 frames\nif (frame % 40 === 30) {\n  // decide left or right\n  const left = Math.random() > 0.5;\n  const asteroidX = left ? -5 : 805;\n  const vX = left ? 10 : -10;\n  // decide y position\n  const asteroidY = Math.floor(Math.random() * 900);\n  const vY = asteroidY < 450 ? 10 : -10;\n  game.asteroids.push({ x: asteroidX, y: asteroidY, vX, vY, alive: true });\n}\n\n// loop through asteroids and update each one\ngame.asteroids.forEach(asteroid => {\n  asteroid.x += asteroid.vX;\n  asteroid.y += asteroid.vY;\n  if (asteroid.x > 1000 || \n      asteroid.x < -100 || \n      asteroid.y > 1000 || \n      asteroid.y < -100) {\n    asteroid.delete = true;\n  }\n  const distance = game.distance(asteroid, game.ship);\n  if (distance < 25) game.ship.dead = true;\n  game.bullets.forEach(bullet => {\n    const bulletDistance = game.distance(asteroid, bullet);\n    if (bulletDistance < 20) {\n      asteroid.delete = true;\n      bullet.delete = true;\n      game.score++;\n    }\n  });\n});\n\n// loop through bullets and update each one\ngame.bullets.forEach(bullet => {\n  bullet.x += bullet.vx;\n  bullet.y += bullet.vy;\n  if (bullet.x > 1000 || \n      bullet.x < -100 || \n      bullet.y > 1000 || \n      bullet.y < -100) {\n    bullet.delete = true;\n  }\n});\n\ngame.asteroids = game.asteroids.filter(asteroid => !asteroid.delete);\ngame.bullets = game.bullets.filter(bullet => !bullet.delete);","draw-code":"const { asteroids, bullets, ship } = game;\n\nif (ship.dead) {\n  context.beginPath();\n  context.font = '20pt Arial';\n  context.fillStyle = '#f00';\n  context.textBaseline = 'middle';\n  context.textAlign = 'center';\n  context.fillText('GAME OVER', 400, 450);\n  context.fillText('Press D to play again', 400, 480);\n  context.closePath();\n\n} else {\n\n  asteroids.forEach(asteroid => {\n    context.beginPath();\n    context.drawImage(game.asteroidImage, asteroid.x - 20, asteroid.y - 20, 40, 40);\n    context.closePath();\n  });\n\n  bullets.forEach(bullet => {\n    context.beginPath();\n    context.fillStyle = '#0f0';\n    context.arc(bullet.x, bullet.y, 3, 0, Math.PI * 2);\n    context.fill();\n    context.closePath();\n  });\n\n  context.save();\n  context.translate(ship.x, ship.y);\n  context.rotate(ship.angle + Math.PI / 2);\n  context.beginPath();\n  context.drawImage(game.shipImage, -ship.w / 2, -ship.h / 2, ship.w, ship.h);\n  context.closePath();\n  context.restore();\n\n}\n\ncontext.beginPath();\ncontext.font = '20pt Arial';\ncontext.fillStyle = '#fff';\ncontext.textBaseline = 'top';\ncontext.textAlign = 'left';\ncontext.fillText('Score: ' + game.score, 1, 1);\ncontext.closePath();","_images":[]}